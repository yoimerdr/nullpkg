from typing import Generic, TypeVar, Union
from ..utils import NameTypeIndentable, Nameable, VarType

_AnyNameable: Union[Nameable, str] = Nameable | str

_AnyType: Union[VarType, _AnyNameable] = VarType | _AnyNameable

_T = TypeVar("_T")


class Parameter(NameTypeIndentable, Generic[_T]):
    def __init__(self, name: _AnyNameable, value: _T = None, required: bool = False, type: _AnyType = None) -> None: ...
    @staticmethod
    def args(name: _AnyNameable = 'args', type: _AnyType = None) -> Parameter: ...
    @staticmethod
    def kwargs(name: _AnyNameable = 'kwargs', type: _AnyType = None) -> Parameter: ...
    @property
    def value(self) -> _T: ...
    @value.setter
    def value(self, value: _T): ...
    @property
    def required(self) -> bool: ...
    @required.setter
    def required(self, value: bool): ...
    @property
    def isVaryingLength(self) -> bool: ...
    def __str__(self) -> str: ...
