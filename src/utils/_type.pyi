from typing import Union

from ._nodes import ImportPathNode
from ._nameable import Nameable

_AnyNameable: Union = str | Nameable

class Type(Nameable):
    def __init__(self, type: _AnyNameable): ...
    @property
    def module(self) -> ImportPathNode | None: ...
    @module.setter
    def module(self, module: _AnyNameable): ...
    @property
    def fullname(self) -> str: ...
    @staticmethod
    def generic(generic: _AnyNameable, *types: _AnyNameable) -> Type: ...
    @staticmethod
    def iterable(generic: _AnyNameable, principal: _AnyNameable) -> Type: ...
    @staticmethod
    def of(value, short: bool = False) -> Type: ...
    def __str__(self) -> str: ...

class VarType(Type):
    def __str__(self) -> str: ...

class ReturnType(Type):
    def __str__(self) -> str: ...