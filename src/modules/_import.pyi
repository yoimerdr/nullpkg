from typing import Sequence, Union
from ..utils import Nameable, Indentable, ImportPathNode

_Imports: Union = Sequence[Nameable] | Sequence[str]
_AnyNameable: Union = Nameable | str


class AliasImport(Nameable):
    def __init__(self, name: _AnyNameable, alias: _AnyNameable = None): ...

    @property
    def alias(self) -> Nameable: ...

    @alias.setter
    def alias(self, alias: _AnyNameable): ...

    def __str__(self) -> str: ...


class Import(ImportPathNode, Indentable):
    def __init__(self, name: _AnyNameable, imports: _Imports = None, import_all: bool = False, relative: int = 0,
                 level: int = 0, alias: _AnyNameable = None): ...

    @staticmethod
    def of(value, imports: _Imports = None, import_all: bool = False, relative: int = 0,
           level: int = 0, alias: _AnyNameable = None) -> Import: ...

    @property
    def imports(self) -> dict[str, Nameable]: ...

    @imports.setter
    def imports(self, imports: _Imports): ...

    @property
    def alias(self) -> Nameable: ...

    @alias.setter
    def alias(self, alias: _AnyNameable): ...

    @property
    def importAll(self) -> bool: ...

    @importAll.setter
    def importAll(self, import_all: bool): ...

    @property
    def relative(self) -> int: ...

    @relative.setter
    def relative(self, relative: int): ...

    def append(self, name: _AnyNameable): ...

    def remove(self, name: _AnyNameable): ...

    def clear(self): ...

    def __str__(self) -> str: ...
